{
  "name": "extract-gettext",
  "version": "0.0.4",
  "description": "Extract gettext strings from __('literal') and __n('single', 'plural', n ) functions in any source",
  "main": "index.js",
  "bin": {
    "extract-gettext": "./bin/extract-gettext.js"
  },
  "scripts": {
    "test": "node test/scan.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mvhenten/extract-gettext.git"
  },
  "keywords": [
    "gettext",
    "i18n",
    "extract",
    "scan"
  ],
  "author": {
    "name": "Matthijs van Henten"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mvhenten/extract-gettext/issues"
  },
  "homepage": "https://github.com/mvhenten/extract-gettext",
  "devDependencies": {
    "js-beautify": "^1.5.1",
    "jshint": "^2.5.5",
    "mkdirp": "^0.5.1",
    "tape": "^2.14.0"
  },
  "dependencies": {
    "async": "^0.9.0",
    "commander": "^2.3.0",
    "glob": "^4.0.5",
    "lex": "^1.7.6",
    "lodash": "^2.4.1",
    "mkdirs": "0.0.2",
    "parse-filepath": "^0.6.3"
  },
  "gitHead": "7c14645d2c8bb1a5ab27fb7c4216a1fe87d08d8a",
  "readme": "extract-getext\n==============\n\n[![Build Status](https://drone.io/github.com/mvhenten/extract-gettext/status.png)](https://drone.io/github.com/mvhenten/extract-gettext/latest)\n\nExtract gettext strings from `__('literal')` and `__n('single', 'plural', n )` functions in any source.\nThis module currently only looks for the `__` and `__n`. However, adding other signatures is trivial (see lex.js).\n\nIt does not do proper plurals - it just smashes everything into one flat structure, wich, actually, is similar to what the real `xgettext` does. \nWhen outputting a .json file, the format is usable by [i18next-conv](https://www.npmjs.org/package/i18next-conv).\n\n## Install\n\n    npm install extract-gettext\n    \n## Usage\n\n### CLI\n\n    extract-gettext -o strings.json /path/to/sources\n    \n### API\n\n( as taken from the \"test\" )\n\n```javascript\n    test('scanner', function(assert) {\n        var expect = ['Plain old singluar',\n          'as the other',\n          'duplicate strings are filtered',\n          'error, but it works',\n          'even mixing goes',\n          'like this',\n          'one on the same line',\n          'or that',\n          'plural',\n          'single'];\n    \n        scan(__dirname + '/../test/*', function(err, strings) {\n            assert.deepEqual(strings, expect, 'Retrieved expected strings');\n            assert.end();\n        });\n    });\n```\n## background\n\nI wasn't going to write yet another variety of `xgettext`. `xgettext` has good support for javascript, and extracts strings faster then this tool.\nHowever, I need a little bit of flexibility. `xgettext` is hardcoded for the `_('literal')` notation, a namespace usually occupied by `lodash` in my world.\nAs a small benefit, this small variety uses a simple lexer to extract translations, but it really doesn't care what programming language you've written your files in.\n\nThat may come in handy one day for coffeescript, typescript or even ES6.\n\nSome other good tools exist, such as:\n\n* [xgettext-js](https://github.com/Automattic/xgettext-js)\n* [jsxgettext](https://github.com/zaach/jsxgettext)\n\n## roadmap and future development\n\nI'm propably not going to update this tool as it works for me and it works fast and decent enough. I have too little knowledge of the various .json and .po formats for pluralization and the \"specs\" seem a bit ambigious to me. However, maybe I misread something, so if you would like to use this and need this type of functionality, send me an example of the desired output format with some explaination :)\n\n",
  "readmeFilename": "README.md",
  "_id": "extract-gettext@0.0.4",
  "_shasum": "6f357412f260eda72916f8da8d8c8854a6669b3d",
  "_from": "git://github.com/onepercentclub/extract-gettext.git#7c14645d2c8bb1a5ab27fb7c4216a1fe87d08d8a",
  "_resolved": "git://github.com/onepercentclub/extract-gettext.git#7c14645d2c8bb1a5ab27fb7c4216a1fe87d08d8a"
}
